# Alchemorsel v3 Configuration
# This file contains default configuration values for development
#
# CRITICAL SECURITY WARNING:
# This configuration file has been updated to remove all hardcoded secrets.
# All sensitive values (passwords, API keys, tokens) MUST be loaded from:
# - Environment variables (prefixed with ALCHEMORSEL_)
# - Docker secrets (/run/secrets/)
# - External secret managers (Vault, AWS Secrets Manager, etc.)
#
# DO NOT put actual secrets in this file!
# Use the secure configuration loader: config.LoadSecureConfig()

app:
  name: "Alchemorsel"
  version: "3.0.0"
  environment: "development"
  debug: true
  log_level: "debug"
  log_format: "console"

server:
  host: "0.0.0.0"
  port: 8080
  read_timeout: "15s"
  write_timeout: "15s"
  idle_timeout: "60s"
  max_header_bytes: 1048576 # 1MB
  shutdown_timeout: "30s"
  enable_cors: true
  allowed_origins:
    - "http://localhost:3000"
    - "http://localhost:8080"
  trusted_proxies: []
  enable_compression: true
  enable_pprof: true

database:
  driver: "postgres"
  host: "localhost"
  port: 5432
  database: "alchemorsel_dev"
  username: "postgres"
  # SECURITY WARNING: password MUST be loaded from environment or secret manager
  password: ""  # Load from ALCHEMORSEL_DATABASE_PASSWORD
  ssl_mode: "disable"  # Enable SSL in production
  max_open_conns: 25
  max_idle_conns: 5
  conn_max_lifetime: "1h"
  conn_max_idle_time: "10m"
  log_level: "info"
  slow_query_threshold: "100ms"
  auto_migrate: true

redis:
  host: "localhost"
  port: 6379
  # SECURITY WARNING: password should be loaded from environment or secret manager
  password: ""  # Load from ALCHEMORSEL_REDIS_PASSWORD if Redis auth is enabled
  database: 0
  max_retries: 3
  min_idle_conns: 2
  max_idle_conns: 10
  conn_max_lifetime: "1h"
  dial_timeout: "5s"
  read_timeout: "3s"
  write_timeout: "3s"
  pool_size: 10
  enable_cluster: false
  cluster_nodes: []

auth:
  # SECURITY WARNING: jwt_secret MUST be loaded from environment or secret manager
  # DO NOT put actual secrets in this file
  jwt_secret: ""  # Load from ALCHEMORSEL_AUTH_JWT_SECRET
  jwt_expiration: "24h"
  refresh_expiration: "168h" # 7 days
  bcrypt_cost: 10
  enable_oauth: true
  google_client_id: ""  # Load from ALCHEMORSEL_AUTH_GOOGLE_CLIENT_ID
  google_client_secret: ""  # Load from ALCHEMORSEL_AUTH_GOOGLE_CLIENT_SECRET
  facebook_app_id: ""  # Load from ALCHEMORSEL_AUTH_FACEBOOK_APP_ID
  facebook_app_secret: ""  # Load from ALCHEMORSEL_AUTH_FACEBOOK_APP_SECRET
  session_secret: ""  # Load from ALCHEMORSEL_AUTH_SESSION_SECRET
  session_max_age: 86400 # 24 hours

aws:
  region: "us-east-1"
  # SECURITY WARNING: AWS credentials should be loaded from environment, IAM roles, or secret manager
  access_key_id: ""  # Load from ALCHEMORSEL_AWS_ACCESS_KEY_ID or use IAM role
  secret_access_key: ""  # Load from ALCHEMORSEL_AWS_SECRET_ACCESS_KEY or use IAM role
  s3_bucket: "alchemorsel-dev"
  cloudfront_url: ""

ai:
  provider: "ollama"  # Changed to ollama for containerized AI
  # SECURITY WARNING: API keys MUST be loaded from environment or secret manager
  openai_key: ""  # Load from ALCHEMORSEL_AI_OPENAI_KEY
  openai_model: "gpt-4"
  anthropic_key: ""  # Load from ALCHEMORSEL_AI_ANTHROPIC_KEY
  anthropic_model: "claude-3-sonnet"
  
  # Ollama configuration for containerized AI
  ollama_host: "http://ollama:11434"  # Internal Docker network
  ollama_model: "llama3.2:3b"
  ollama_timeout: "30s"
  
  max_tokens: 2000
  temperature: 0.7
  timeout_seconds: 30
  enable_cache: true
  cache_ttl: "1h"

kafka:
  brokers:
    - "localhost:9092"
  group_id: "alchemorsel-api"
  client_id: "alchemorsel-api-v3"
  enable_sasl: false  # Enable SASL in production for security
  sasl_username: ""  # Load from ALCHEMORSEL_KAFKA_SASL_USERNAME
  # SECURITY WARNING: SASL password MUST be loaded from environment or secret manager
  sasl_password: ""  # Load from ALCHEMORSEL_KAFKA_SASL_PASSWORD
  enable_tls: false  # Enable TLS in production for security
  retry_max: 3
  required_acks: 1

monitoring:
  enable_metrics: true
  metrics_port: 9090
  enable_tracing: true
  jaeger_endpoint: "http://localhost:14268/api/traces"
  sampling_rate: 0.1
  enable_newrelic: false
  # SECURITY WARNING: monitoring secrets MUST be loaded from environment or secret manager
  newrelic_license: ""  # Load from ALCHEMORSEL_MONITORING_NEWRELIC_LICENSE
  newrelic_app_name: "Alchemorsel API v3"
  sentry_dsn: ""  # Load from ALCHEMORSEL_MONITORING_SENTRY_DSN
  sentry_environment: "development"
  health_check_path: "/health"
  readiness_path: "/ready"

email:
  provider: "smtp"
  smtp_host: "smtp.gmail.com"
  smtp_port: 587
  smtp_username: ""  # Load from ALCHEMORSEL_EMAIL_SMTP_USERNAME
  # SECURITY WARNING: email secrets MUST be loaded from environment or secret manager
  smtp_password: ""  # Load from ALCHEMORSEL_EMAIL_SMTP_PASSWORD
  from_address: "noreply@alchemorsel.com"
  from_name: "Alchemorsel"
  sendgrid_api_key: ""  # Load from ALCHEMORSEL_EMAIL_SENDGRID_API_KEY
  enable_tls: true

storage:
  provider: "local"
  local_path: "./uploads"
  max_file_size: 10485760 # 10MB
  allowed_types:
    - "image/jpeg"
    - "image/png"
    - "image/webp"
    - "video/mp4"
  image_max_width: 2048
  image_max_height: 2048
  enable_cdn: false
  cdn_base_url: ""

rate_limit:
  enable: true
  requests_per_min: 60
  burst_size: 10
  cleanup_interval: "1m"
  use_redis: true

features:
  enable_ai_recipes: true
  enable_social_features: true
  enable_premium: false
  enable_analytics: true
  enable_export: true
  maintenance_mode: false

# Security configuration (new section)
security:
  enable_audit_logging: true
  audit_log_file: "/var/log/alchemorsel/audit.log"
  enable_secret_manager: true
  secret_manager:
    enable_cache: true
    cache_ttl: "1h"
    max_cache_size: 1000
    enable_audit_logging: true
    rotation_interval: "24h"
    encryption_algorithm: "AES-256-GCM"
    enable_zeroization: true
    master_key_derivation:
      time: 1
      memory: 65536  # 64MB
      threads: 4
      key_len: 32
  secret_loader:
    enable_env_vars: true
    enable_vault: false  # Enable when Vault is available
    enable_kubernetes: false  # Enable in K8s environment
    enable_aws_secrets_manager: false  # Enable for AWS deployment
    env_prefix: "ALCHEMORSEL"
    default_provider: "env"
    cache_ttl: "1h"
    enable_validation: true
    enable_transformation: true
    security_policy:
      require_encryption: false
      allowed_providers: ["env", "vault", "kubernetes", "aws-sm"]
      require_validation: true
      max_secret_size: 1048576  # 1MB
      enforce_access_control: true