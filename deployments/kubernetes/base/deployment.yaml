apiVersion: apps/v1
kind: Deployment
metadata:
  name: alchemorsel-api
  namespace: alchemorsel
  labels:
    app.kubernetes.io/name: alchemorsel-api
    app.kubernetes.io/version: v3
    app.kubernetes.io/component: api
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 25%
  selector:
    matchLabels:
      app.kubernetes.io/name: alchemorsel-api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: alchemorsel-api
        app.kubernetes.io/version: v3
        app.kubernetes.io/component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3010"
        prometheus.io/path: "/metrics"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      serviceAccountName: alchemorsel-api
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: api
          image: ghcr.io/alchemorsel/v3:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 3010
              protocol: TCP
            - name: metrics
              containerPort: 8080
              protocol: TCP
          env:
            - name: GO_ENV
              value: "production"
            - name: PORT
              value: "3010"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: alchemorsel-secrets
                  key: database-url
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: alchemorsel-secrets
                  key: redis-url
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: alchemorsel-secrets
                  key: jwt-secret
            - name: OLLAMA_BASE_URL
              valueFrom:
                configMapKeyRef:
                  name: alchemorsel-config
                  key: ollama-url
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: alchemorsel-config
                  key: otel-endpoint
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65532
            runAsGroup: 65532
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 30
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /app/cache
      volumes:
        - name: tmp
          emptyDir: {}
        - name: cache
          emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - key: "spot"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - alchemorsel-api
                topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 50
              preference:
                matchExpressions:
                  - key: node.kubernetes.io/instance-type
                    operator: In
                    values:
                      - t3.medium
                      - t3.large
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alchemorsel-web
  namespace: alchemorsel
  labels:
    app.kubernetes.io/name: alchemorsel-web
    app.kubernetes.io/version: v3
    app.kubernetes.io/component: web
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 25%
  selector:
    matchLabels:
      app.kubernetes.io/name: alchemorsel-web
  template:
    metadata:
      labels:
        app.kubernetes.io/name: alchemorsel-web
        app.kubernetes.io/version: v3
        app.kubernetes.io/component: web
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9113"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: alchemorsel-web
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
        runAsGroup: 101
        fsGroup: 101
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: nginx
          image: ghcr.io/alchemorsel/v3-web:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 101
            runAsGroup: 101
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          volumeMounts:
            - name: nginx-cache
              mountPath: /var/cache/nginx
            - name: nginx-pid
              mountPath: /var/run
            - name: nginx-logs
              mountPath: /var/log/nginx
        - name: nginx-exporter
          image: nginx/nginx-prometheus-exporter:0.11.0
          ports:
            - name: metrics
              containerPort: 9113
              protocol: TCP
          args:
            - -nginx.scrape-uri=http://localhost:80/nginx_status
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            capabilities:
              drop:
                - ALL
          resources:
            requests:
              memory: "16Mi"
              cpu: "10m"
            limits:
              memory: "64Mi"
              cpu: "50m"
      volumes:
        - name: nginx-cache
          emptyDir: {}
        - name: nginx-pid
          emptyDir: {}
        - name: nginx-logs
          emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - key: "spot"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - alchemorsel-web
                topologyKey: kubernetes.io/hostname
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alchemorsel-ollama
  namespace: alchemorsel
  labels:
    app.kubernetes.io/name: alchemorsel-ollama
    app.kubernetes.io/version: v3
    app.kubernetes.io/component: ai
spec:
  replicas: 1
  strategy:
    type: Recreate  # Ollama doesn't support rolling updates well due to model storage
  selector:
    matchLabels:
      app.kubernetes.io/name: alchemorsel-ollama
  template:
    metadata:
      labels:
        app.kubernetes.io/name: alchemorsel-ollama
        app.kubernetes.io/version: v3
        app.kubernetes.io/component: ai
      annotations:
        prometheus.io/scrape: "false"
    spec:
      serviceAccountName: alchemorsel-ollama
      securityContext:
        runAsNonRoot: false  # Ollama requires root for now
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: ollama
          image: ollama/ollama:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 11434
              protocol: TCP
          env:
            - name: OLLAMA_HOST
              value: "0.0.0.0"
            - name: OLLAMA_ORIGINS
              value: "*"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false  # Ollama needs to write models
            capabilities:
              drop:
                - ALL
                - SETUID
                - SETGID
            seccompProfile:
              type: RuntimeDefault
          resources:
            requests:
              memory: "2Gi"
              cpu: "500m"
            limits:
              memory: "8Gi"
              cpu: "2000m"
          livenessProbe:
            httpGet:
              path: /api/tags
              port: http
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/tags
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - name: ollama-data
              mountPath: /root/.ollama
      volumes:
        - name: ollama-data
          persistentVolumeClaim:
            claimName: ollama-data
      nodeSelector:
        kubernetes.io/os: linux
        # Prefer nodes with more CPU/memory for AI workloads
        node.kubernetes.io/instance-type: t3.large
      tolerations:
        - key: "ai-workload"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: node.kubernetes.io/instance-type
                    operator: In
                    values:
                      - t3.large
                      - t3.xlarge
                      - g4dn.xlarge