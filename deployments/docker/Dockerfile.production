# Production Dockerfile optimized for security, performance, and size
FROM golang:1.22-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    git \
    ca-certificates \
    tzdata \
    upx \
    gcc \
    musl-dev

# Set build arguments
ARG VERSION=unknown
ARG COMMIT=unknown
ARG BUILD_TIME=unknown

# Set security labels
LABEL maintainer="Alchemorsel Team <devops@alchemorsel.com>"
LABEL org.opencontainers.image.source="https://github.com/alchemorsel/v3"
LABEL org.opencontainers.image.description="Alchemorsel v3 API Server - Production"
LABEL org.opencontainers.image.version="${VERSION}"
LABEL org.opencontainers.image.created="${BUILD_TIME}"
LABEL org.opencontainers.image.licenses="MIT"

# Set working directory
WORKDIR /app

# Copy dependency files first for better caching
COPY go.mod go.sum ./

# Download and verify dependencies
RUN go mod download && go mod verify

# Copy source code
COPY . .

# Run security checks
RUN go vet ./...
RUN go test -race -short ./...

# Build optimized binary with version information
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -a \
    -installsuffix cgo \
    -ldflags="-w -s -X main.version=${VERSION} -X main.commit=${COMMIT} -X main.buildTime=${BUILD_TIME} -extldflags '-static'" \
    -tags "netgo osusergo static_build" \
    -trimpath \
    -o main cmd/api/main.go

# Compress binary (optional, can be disabled for faster builds)
RUN upx --best --lzma main || echo "UPX compression failed, continuing without compression"

# Production stage using distroless for maximum security
FROM gcr.io/distroless/static:nonroot

# Import timezone data
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# Copy binary from builder stage
COPY --from=builder /app/main /app/main

# Copy configuration files
COPY --from=builder /app/config /app/config

# Copy static files and templates
COPY --from=builder /app/internal/infrastructure/http/server/static /app/static
COPY --from=builder /app/internal/infrastructure/http/server/templates /app/templates

# Copy migration files
COPY --from=builder /app/internal/infrastructure/persistence/migrations /app/migrations

# Set working directory
WORKDIR /app

# Use nonroot user from distroless (UID 65532)
USER nonroot:nonroot

# Expose ports (app, metrics)
EXPOSE 8080 9090

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD ["/app/main", "--health-check"]

# Set resource limits (can be overridden)
ENV GOMAXPROCS=1
ENV GOMEMLIMIT=512MiB

# Run the application
ENTRYPOINT ["/app/main"]