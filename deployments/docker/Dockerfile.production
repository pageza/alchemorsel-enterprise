# Multi-stage production Dockerfile for Alchemorsel v3
# Security-optimized with minimal attack surface

# Build arguments
ARG GO_VERSION=1.23
ARG NODE_VERSION=20
ARG ALPINE_VERSION=3.20
ARG DISTROLESS_VERSION=nonroot

# Stage 1: Build Go application
FROM golang:${GO_VERSION}-alpine${ALPINE_VERSION} AS go-builder

# Install build dependencies
RUN apk add --no-cache \
    git \
    ca-certificates \
    tzdata \
    gcc \
    musl-dev

# Create non-root user for build
RUN adduser -D -g '' appuser

# Set working directory
WORKDIR /app

# Copy go mod files first for better caching
COPY go.mod go.sum ./
RUN go mod download
RUN go mod verify

# Copy source code
COPY . .

# Build arguments for versioning
ARG VERSION=dev
ARG COMMIT=unknown
ARG BUILD_TIME=unknown

# Build the application with optimizations
RUN CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build \
    -a -installsuffix cgo \
    -ldflags="-s -w \
              -X main.Version=${VERSION} \
              -X main.Commit=${COMMIT} \
              -X main.BuildTime=${BUILD_TIME} \
              -extldflags '-static'" \
    -o alchemorsel \
    cmd/api/main.go

# Build migration tool
RUN CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build \
    -a -installsuffix cgo \
    -ldflags="-s -w -extldflags '-static'" \
    -o migrate \
    cmd/migrate/main.go

# Stage 2: Build frontend assets
FROM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS frontend-builder

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++

WORKDIR /app

# Copy package files
COPY package*.json ./
RUN npm ci --only=production

# Copy frontend source
COPY src/ src/
COPY webpack.config.js postcss.config.js ./

# Build frontend assets
RUN npm run build:production

# Stage 3: Security scanner for binaries
FROM alpine:${ALPINE_VERSION} AS security-scanner

# Install Trivy for binary scanning
RUN apk add --no-cache curl
RUN curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

# Copy binaries for scanning
COPY --from=go-builder /app/alchemorsel /app/migrate /tmp/

# Scan binaries (this will fail the build if critical vulnerabilities found)
RUN trivy filesystem --exit-code 1 --severity CRITICAL /tmp/

# Stage 4: Final production image
FROM gcr.io/distroless/static-debian11:${DISTROLESS_VERSION}

# Metadata labels
LABEL maintainer="Alchemorsel Team <team@alchemorsel.com>" \
      org.opencontainers.image.title="Alchemorsel v3" \
      org.opencontainers.image.description="Enterprise AI-powered recipe platform" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.created="${BUILD_TIME}" \
      org.opencontainers.image.revision="${COMMIT}" \
      org.opencontainers.image.vendor="Alchemorsel" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.source="https://github.com/alchemorsel/v3"

# Copy SSL certificates from builder
COPY --from=go-builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy timezone data
COPY --from=go-builder /usr/share/zoneinfo /usr/share/zoneinfo

# Copy built binaries
COPY --from=go-builder --chown=65532:65532 /app/alchemorsel /app/migrate /app/

# Copy frontend assets
COPY --from=frontend-builder --chown=65532:65532 /app/dist /app/static/

# Copy configuration and templates
COPY --from=go-builder --chown=65532:65532 /app/config /app/config/
COPY --from=go-builder --chown=65532:65532 /app/internal/templates /app/templates/

# Security: Use non-root user (already set in distroless)
USER 65532:65532

# Expose ports
EXPOSE 3010

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
    CMD ["/app/alchemorsel", "healthcheck"]

# Default command
ENTRYPOINT ["/app/alchemorsel"]
CMD ["serve"]