# Alchemorsel v3 nginx server configuration
# Production-ready with security hardening

# Upstream servers
upstream api_backend {
    server alchemorsel-api:3010 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream ollama_backend {
    server alchemorsel-ollama:11434 max_fails=3 fail_timeout=30s;
    keepalive 8;
}

# Rate limiting maps
map $request_uri $limit_key {
    ~*/api/auth/* $binary_remote_addr;
    ~*/api/ai/* $binary_remote_addr;
    default "";
}

# Server block for HTTP (redirect to HTTPS)
server {
    listen 80;
    server_name _;
    
    # Security headers for HTTP
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Redirect all HTTP to HTTPS
    return 301 https://$host$request_uri;
}

# Main server block for HTTPS
server {
    listen 443 ssl http2;
    server_name alchemorsel.com www.alchemorsel.com;
    
    # SSL configuration
    include /etc/nginx/conf.d/ssl-params.conf;
    
    # Security headers
    include /etc/nginx/conf.d/security-headers.conf;
    
    # Document root
    root /usr/share/nginx/html;
    index index.html;
    
    # Connection limits
    limit_conn perip 50;
    limit_conn perserver 1000;
    
    # Custom error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    # Security: Block common attack patterns
    location ~* \.(htaccess|htpasswd|ini|log|sh|sql|conf)$ {
        deny all;
        access_log /var/log/nginx/security.log security;
    }
    
    # Security: Block user agents
    if ($http_user_agent ~* (nmap|nikto|wikto|sf|sqlmap|bsqlbf|w3af|acunetix|havij|appscan)) {
        return 444;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Static assets with caching
    location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
        limit_req zone=static burst=20 nodelay;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
        
        # Security headers for static assets
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        
        # Compress static assets
        gzip_static on;
        
        # Try files
        try_files $uri $uri/ =404;
    }
    
    # API endpoints
    location /api/ {
        # Rate limiting for API
        limit_req zone=api burst=50 nodelay;
        
        # CORS headers
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Max-Age 3600 always;
        
        # Handle preflight requests
        if ($request_method = OPTIONS) {
            return 204;
        }
        
        # Proxy to API backend
        proxy_pass http://api_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # Cache control for API responses
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
    }
    
    # Authentication endpoints with strict rate limiting
    location /api/auth/ {
        limit_req zone=auth burst=5 nodelay;
        
        # Additional security for auth endpoints
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header Referrer-Policy strict-origin-when-cross-origin always;
        
        # Proxy to API backend
        proxy_pass http://api_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Disable caching for auth endpoints
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
    }
    
    # AI/Ollama endpoints
    location /api/ai/ {
        # Rate limiting for AI endpoints
        limit_req zone=api burst=10 nodelay;
        
        # Longer timeouts for AI processing
        proxy_connect_timeout 60s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
        
        # Proxy to API backend (which will route to Ollama)
        proxy_pass http://api_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Disable buffering for streaming responses
        proxy_buffering off;
        proxy_cache off;
        
        # Headers for AI responses
        add_header Cache-Control "no-cache" always;
    }
    
    # WebSocket support for real-time features
    location /ws {
        proxy_pass http://api_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket specific settings
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
    }
    
    # Frontend routes (SPA routing)
    location / {
        try_files $uri $uri/ /index.html;
        
        # Cache control for HTML files
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
    }
    
    # Service worker
    location /sw.js {
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
        add_header Service-Worker-Allowed "/" always;
    }
    
    # Manifest and favicon
    location ~* \.(webmanifest|manifest\.json)$ {
        add_header Cache-Control "max-age=31536000" always;
        add_header Content-Type "application/manifest+json" always;
    }
    
    # Robots.txt
    location /robots.txt {
        add_header Cache-Control "max-age=86400" always;
        try_files $uri =404;
    }
    
    # Security.txt
    location /.well-known/security.txt {
        add_header Cache-Control "max-age=86400" always;
        try_files $uri =404;
    }
}

# Staging server configuration
server {
    listen 443 ssl http2;
    server_name staging.alchemorsel.com;
    
    # SSL configuration
    include /etc/nginx/conf.d/ssl-params.conf;
    
    # Security headers
    include /etc/nginx/conf.d/security-headers.conf;
    
    # Add staging indicator
    add_header X-Environment "staging" always;
    add_header X-Robots-Tag "noindex, nofollow" always;
    
    # Basic auth for staging
    auth_basic "Staging Environment";
    auth_basic_user_file /etc/nginx/.htpasswd;
    
    # Same configuration as production but with different upstream
    root /usr/share/nginx/html;
    index index.html;
    
    # API endpoints for staging
    location /api/ {
        limit_req zone=api burst=100 nodelay;
        
        proxy_pass http://api_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
    }
    
    # Frontend routes for staging
    location / {
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
    }
}