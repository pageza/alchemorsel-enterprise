name: Health Check System Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'pkg/healthcheck/**'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/healthcheck-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'pkg/healthcheck/**'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/healthcheck-tests.yml'

env:
  GO_VERSION: '1.21'
  POSTGRES_PASSWORD: healthcheck_test_password
  POSTGRES_USER: healthcheck_test_user
  POSTGRES_DB: healthcheck_test_db

jobs:
  # Unit Tests - Fast feedback
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run unit tests
      run: |
        go test -short -v -race -coverprofile=unit-coverage.out ./pkg/healthcheck/
    
    - name: Generate unit test coverage report
      run: |
        go tool cover -func=unit-coverage.out
        go tool cover -html=unit-coverage.out -o unit-coverage.html
    
    - name: Upload unit test coverage
      uses: actions/upload-artifact@v3
      with:
        name: unit-test-coverage
        path: |
          unit-coverage.out
          unit-coverage.html

  # Integration Tests - Real services
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Download dependencies
      run: go mod download
    
    - name: Wait for services
      run: |
        # Wait for PostgreSQL
        until pg_isready -h localhost -p 5432 -U ${{ env.POSTGRES_USER }}; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
        # Wait for Redis
        until redis-cli -h localhost -p 6379 ping; do
          echo "Waiting for Redis..."
          sleep 2
        done
    
    - name: Run integration tests
      run: |
        go test -v -race -tags=integration -run="TestIntegration" -coverprofile=integration-coverage.out ./pkg/healthcheck/
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: ${{ env.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        POSTGRES_DB: ${{ env.POSTGRES_DB }}
        REDIS_HOST: localhost
        REDIS_PORT: 6379
    
    - name: Generate integration test coverage report
      run: |
        go tool cover -func=integration-coverage.out
        go tool cover -html=integration-coverage.out -o integration-coverage.html
    
    - name: Upload integration test coverage
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-coverage
        path: |
          integration-coverage.out
          integration-coverage.html

  # Performance Tests - Benchmarks and performance validation
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run performance tests
      run: |
        go test -v -run="TestPerformance" ./pkg/healthcheck/
    
    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem -count=3 -run=^$ ./pkg/healthcheck/ | tee benchmark-results.txt
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.txt
    
    - name: Performance regression check
      run: |
        # Simple performance check - ensure benchmarks complete successfully
        if grep -q "FAIL" benchmark-results.txt; then
          echo "Performance tests failed"
          exit 1
        fi
        echo "Performance tests passed"

  # Comprehensive Test Suite
  comprehensive-tests:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [unit-tests, integration-tests, performance-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run comprehensive test suite
      run: |
        go test -v -race -coverprofile=comprehensive-coverage.out ./pkg/healthcheck/
    
    - name: Generate comprehensive coverage report
      run: |
        go tool cover -func=comprehensive-coverage.out
        COVERAGE=$(go tool cover -func=comprehensive-coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: ${COVERAGE}%"
        
        # Check coverage threshold (90%)
        if (( $(echo "$COVERAGE < 90" | bc -l) )); then
          echo "Coverage ${COVERAGE}% is below required 90%"
          exit 1
        fi
        
        echo "Coverage requirement met: ${COVERAGE}%"
        go tool cover -html=comprehensive-coverage.out -o comprehensive-coverage.html
    
    - name: Upload comprehensive coverage
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-coverage
        path: |
          comprehensive-coverage.out
          comprehensive-coverage.html

  # Security and Quality Checks
  security-and-quality:
    name: Security and Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run go vet
      run: go vet ./pkg/healthcheck/
    
    - name: Run staticcheck
      uses: dominikh/staticcheck-action@v1.3.0
      with:
        version: "2023.1.6"
        install-go: false
        cache-key: ${{ env.GO_VERSION }}
    
    - name: Run gosec security scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec-results.sarif ./pkg/healthcheck/...'
    
    - name: Upload gosec results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: gosec-results.sarif

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, comprehensive-tests, security-and-quality]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create test summary
      run: |
        echo "# Health Check System Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Test Status" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Comprehensive Tests: ${{ needs.comprehensive-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security & Quality: ${{ needs.security-and-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check if all tests passed
        if [[ "${{ needs.unit-tests.result }}" == "success" && \
              "${{ needs.integration-tests.result }}" == "success" && \
              "${{ needs.performance-tests.result }}" == "success" && \
              "${{ needs.comprehensive-tests.result }}" == "success" && \
              "${{ needs.security-and-quality.result }}" == "success" ]]; then
          echo "✅ All health check tests passed!" >> $GITHUB_STEP_SUMMARY
          echo "TEST_STATUS=success" >> $GITHUB_ENV
        else
          echo "❌ Some health check tests failed" >> $GITHUB_STEP_SUMMARY
          echo "TEST_STATUS=failure" >> $GITHUB_ENV
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Coverage Reports" >> $GITHUB_STEP_SUMMARY
        echo "Coverage reports are available in the test artifacts." >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Performance Results" >> $GITHUB_STEP_SUMMARY
        if [ -f benchmark-results/benchmark-results.txt ]; then
          echo "### Benchmark Results" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          head -20 benchmark-results/benchmark-results.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Set final status
      run: |
        if [ "$TEST_STATUS" = "failure" ]; then
          echo "Health check tests failed"
          exit 1
        fi
        echo "All health check tests completed successfully"

# Workflow for nightly comprehensive testing
  nightly-tests:
    name: Nightly Comprehensive Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    timeout-minutes: 60
    
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
        postgres-version: ['14', '15', '16']
        redis-version: ['6', '7']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
    
    - name: Run comprehensive tests with matrix
      run: |
        export POSTGRES_VERSION=${{ matrix.postgres-version }}
        export REDIS_VERSION=${{ matrix.redis-version }}
        go test -v -race -timeout=30m ./pkg/healthcheck/
      env:
        GO_VERSION: ${{ matrix.go-version }}
    
    - name: Upload matrix test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: nightly-results-go${{ matrix.go-version }}-pg${{ matrix.postgres-version }}-redis${{ matrix.redis-version }}
        path: test-results/