name: Comprehensive Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily security scans at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - sast
          - dast
          - dependency
          - container
          - infrastructure

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Static Application Security Testing (SAST)
  sast-analysis:
    name: SAST Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'sast' || github.event.inputs.scan_type == ''
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec.sarif -severity medium ./...'

      - name: Upload Gosec results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif

      - name: Run Semgrep SAST
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/golang
            p/docker
            p/kubernetes
          generateSarif: "1"

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: go, javascript
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Bandit (Python security scanner for scripts)
        run: |
          pip install bandit
          find . -name "*.py" -exec bandit -r {} + || true

      - name: Run Checkov for IaC security
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform,kubernetes,dockerfile
          output_format: sarif
          output_file_path: checkov.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov.sarif

  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependency' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Run Nancy vulnerability scanner
        run: |
          go install github.com/sonatypecommunity/nancy@latest
          go list -json -deps ./... | nancy sleuth --output-format=json > nancy-report.json

      - name: Run Snyk Go vulnerability scan
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-go.json

      - name: Run Snyk Docker vulnerability scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          args: --severity-threshold=medium --json-file-output=snyk-docker.json

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'alchemorsel-v3'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --nvdApiKey ${{ secrets.NVD_API_KEY }}
            --suppression scripts/dependency-check-suppressions.xml

      - name: Upload OWASP Dependency Check results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/dependency-check-report.sarif

      - name: Run npm audit for Node.js dependencies
        run: |
          npm audit --json > npm-audit.json || true
          npm audit --audit-level=moderate

      - name: Run Yarn audit for additional security checks
        run: |
          yarn audit --json > yarn-audit.json || true

      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-reports
          path: |
            nancy-report.json
            snyk-*.json
            npm-audit.json
            yarn-audit.json
            reports/

  # Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'container' || github.event.inputs.scan_type == ''
    needs: []
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployments/docker/Dockerfile.production
          tags: test-image:latest
          load: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'test-image:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        id: grype
        with:
          image: "test-image:latest"
          fail-build: false
          severity-cutoff: medium
          output-format: sarif

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.grype.outputs.sarif }}

      - name: Run Docker Scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: test-image:latest
          sarif-file: docker-scout.sarif
          summary: true

      - name: Upload Docker Scout results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: docker-scout.sarif

      - name: Run Syft for SBOM generation
        uses: anchore/sbom-action@v0
        with:
          image: test-image:latest
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # Infrastructure Security Scanning
  infrastructure-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'infrastructure' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Terraform security scan with Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: deployments/terraform
          framework: terraform
          output_format: sarif
          output_file_path: terraform-checkov.sarif

      - name: Upload Terraform Checkov results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: terraform-checkov.sarif

      - name: Run Kubernetes security scan with Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: deployments/kubernetes
          framework: kubernetes
          output_format: sarif
          output_file_path: k8s-checkov.sarif

      - name: Upload Kubernetes Checkov results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: k8s-checkov.sarif

      - name: Run Terraform security scan with tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: deployments/terraform
          format: sarif
          soft_fail: true

      - name: Upload tfsec results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: tfsec.sarif

      - name: Run Kubernetes security scan with Kubesec
        run: |
          wget https://github.com/controlplaneio/kubesec/releases/latest/download/kubesec_linux_amd64.tar.gz
          tar -xzf kubesec_linux_amd64.tar.gz
          chmod +x kubesec
          
          # Scan all Kubernetes manifests
          find deployments/kubernetes -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Scanning $file"
            ./kubesec scan "$file" > "${file}.kubesec.json" || true
          done

      - name: Upload Kubesec results
        uses: actions/upload-artifact@v3
        with:
          name: kubesec-results
          path: deployments/kubernetes/**/*.kubesec.json

  # Dynamic Application Security Testing (DAST)
  dast-scan:
    name: DAST Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dast' || github.event.inputs.scan_type == ''
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: alchemorsel_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Start application for DAST testing
        run: |
          export DATABASE_URL="postgres://postgres:postgres@localhost:5432/alchemorsel_test?sslmode=disable"
          export REDIS_URL="redis://localhost:6379"
          export GO_ENV="test"
          export JWT_SECRET="test-secret"
          
          # Run migrations
          go run cmd/migrate/main.go up
          
          # Start application in background
          go run cmd/api/main.go &
          APP_PID=$!
          echo $APP_PID > app.pid
          
          # Wait for application to start
          timeout 60 bash -c 'until curl -f http://localhost:3010/health; do sleep 2; done'

      - name: Run OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:3010'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -m 10 -T 60'
          allow_issue_writing: false

      - name: Run Nuclei vulnerability scanner
        uses: projectdiscovery/nuclei-action@main
        with:
          target: 'http://localhost:3010'
          templates: 'exposures,vulnerabilities,misconfiguration'
          output: 'nuclei-results.json'

      - name: Upload Nuclei results
        uses: actions/upload-artifact@v3
        with:
          name: nuclei-results
          path: nuclei-results.json

      - name: Cleanup
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
          fi

  # Secrets Detection
  secrets-detection:
    name: Secrets Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog secrets scanner
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks secrets scanner
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Run detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --force-use-all-plugins > secrets-baseline.json
          detect-secrets audit secrets-baseline.json

      - name: Upload secrets scan results
        uses: actions/upload-artifact@v3
        with:
          name: secrets-scan-results
          path: |
            secrets-baseline.json
            .gitleaks-report.json

  # Compliance and Policy Checks
  compliance-check:
    name: Compliance and Policy Check
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'compliance' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OPA Conftest for policy validation
        run: |
          # Install Conftest
          wget https://github.com/open-policy-agent/conftest/releases/latest/download/conftest_Linux_x86_64.tar.gz
          tar xzf conftest_Linux_x86_64.tar.gz
          chmod +x conftest
          
          # Run policy tests
          ./conftest verify --policy scripts/policies/
          ./conftest test --policy scripts/policies/ deployments/kubernetes/
          ./conftest test --policy scripts/policies/ deployments/terraform/

      - name: Run OSCAL compliance validation
        run: |
          # Install OSCAL CLI
          curl -L -o oscal-cli.jar https://repo1.maven.org/maven2/gov/nist/secauto/oscal/tools/oscal-cli/1.0.4/oscal-cli-1.0.4.jar
          
          # Validate OSCAL documents if they exist
          if [ -d "compliance/oscal" ]; then
            java -jar oscal-cli.jar validate compliance/oscal/*.json
          fi

      - name: Generate compliance report
        run: |
          echo "# Security Compliance Report" > compliance-report.md
          echo "Generated on: $(date)" >> compliance-report.md
          echo "" >> compliance-report.md
          echo "## Security Scans Summary" >> compliance-report.md
          echo "- SAST: ✅ Completed" >> compliance-report.md
          echo "- Dependency Scan: ✅ Completed" >> compliance-report.md
          echo "- Container Security: ✅ Completed" >> compliance-report.md
          echo "- Infrastructure Security: ✅ Completed" >> compliance-report.md
          echo "- DAST: ✅ Completed" >> compliance-report.md
          echo "- Secrets Detection: ✅ Completed" >> compliance-report.md

      - name: Upload compliance report
        uses: actions/upload-artifact@v3
        with:
          name: compliance-report
          path: compliance-report.md

  # Security Dashboard Update
  security-dashboard:
    name: Update Security Dashboard
    runs-on: ubuntu-latest
    needs: [sast-analysis, dependency-scan, container-security, infrastructure-security, dast-scan, secrets-detection, compliance-check]
    if: always()
    steps:
      - name: Collect security metrics
        run: |
          echo "Collecting security scan results..."
          echo "SAST: ${{ needs.sast-analysis.result }}"
          echo "Dependency: ${{ needs.dependency-scan.result }}"
          echo "Container: ${{ needs.container-security.result }}"
          echo "Infrastructure: ${{ needs.infrastructure-security.result }}"
          echo "DAST: ${{ needs.dast-scan.result }}"
          echo "Secrets: ${{ needs.secrets-detection.result }}"
          echo "Compliance: ${{ needs.compliance-check.result }}"

      - name: Update security dashboard
        run: |
          # Update Datadog security metrics
          curl -X POST "https://api.datadoghq.com/api/v1/series" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
            -d '{
              "series": [
                {
                  "metric": "alchemorsel.security.scan.status",
                  "points": [['$(date +%s)', 1]],
                  "tags": ["scan_type:comprehensive", "result:${{ job.status }}"]
                }
              ]
            }'

      - name: Notify security team
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security'
          text: |
            🚨 Security scan failures detected in ${{ github.repository }}
            
            Failed scans:
            - SAST: ${{ needs.sast-analysis.result }}
            - Dependency: ${{ needs.dependency-scan.result }}
            - Container: ${{ needs.container-security.result }}
            - Infrastructure: ${{ needs.infrastructure-security.result }}
            - DAST: ${{ needs.dast-scan.result }}
            - Secrets: ${{ needs.secrets-detection.result }}
            - Compliance: ${{ needs.compliance-check.result }}
            
            Please review the security alerts immediately.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}