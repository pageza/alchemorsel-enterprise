# Security-hardened Dockerfile for Alchemorsel v3
# Addresses critical security vulnerabilities:
# - Non-root user execution
# - Minimal attack surface
# - Read-only filesystem
# - No hardcoded secrets
# - Security-focused base image

# Stage 1: Build stage with security hardening
FROM golang:1.21-alpine AS builder

# Security: Install only necessary packages and security updates
RUN apk add --no-cache \
    ca-certificates \
    git \
    tzdata \
    && apk upgrade \
    && rm -rf /var/cache/apk/*

# Security: Create non-root user for build
RUN addgroup -S buildgroup && adduser -S builduser -G buildgroup

# Set working directory
WORKDIR /build

# Copy go mod files first for better caching
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download && go mod verify

# Copy source code
COPY . .

# Security: Change ownership to build user
RUN chown -R builduser:buildgroup /build
USER builduser

# Build the application with security flags
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -a \
    -installsuffix cgo \
    -ldflags='-w -s -extldflags "-static"' \
    -tags netgo \
    -o app \
    ./cmd/api

# Build worker binary
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -a \
    -installsuffix cgo \
    -ldflags='-w -s -extldflags "-static"' \
    -tags netgo \
    -o worker \
    ./cmd/worker

# Stage 2: Security-hardened runtime
FROM scratch AS runtime

# Security: Copy only necessary files from builder
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /etc/group /etc/group

# Create directory structure for non-root user
COPY --from=builder --chown=10000:10000 /build/app /app/app
COPY --from=builder --chown=10000:10000 /build/worker /app/worker

# Create directories for runtime
RUN mkdir -p /app/config /app/logs /var/log/alchemorsel /tmp \
    && chown -R 10000:10000 /app /var/log/alchemorsel /tmp

# Stage 3: Final application image with distroless base
FROM gcr.io/distroless/static:nonroot AS final

# Build arguments for user configuration
ARG USER_ID=10000
ARG GROUP_ID=10000

# Security labels
LABEL security.scan="enabled" \
      security.non-root="true" \
      security.read-only="true" \
      maintainer="security@alchemorsel.com" \
      version="3.0.0-secure"

# Copy application and runtime files
COPY --from=runtime --chown=${USER_ID}:${GROUP_ID} /app /app
COPY --from=runtime --chown=${USER_ID}:${GROUP_ID} /var/log/alchemorsel /var/log/alchemorsel

# Copy configuration templates (read-only)
COPY --chown=${USER_ID}:${GROUP_ID} config/ /app/config/

# Security: Use non-root user (distroless nonroot user)
USER ${USER_ID}:${GROUP_ID}

# Set working directory
WORKDIR /app

# Security: Expose only necessary port
EXPOSE 8080

# Security: Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD ["/app/app", "--health-check"]

# Security: Run application with minimal privileges
ENTRYPOINT ["/app/app"]

# Security metadata
LABEL security.capabilities="NET_BIND_SERVICE" \
      security.user="${USER_ID}" \
      security.group="${GROUP_ID}" \
      security.readonly="true" \
      security.tmpfs="/tmp" \
      security.secrets="external"