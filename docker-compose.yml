version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: alchemorsel-postgres
    environment:
      POSTGRES_DB: alchemorsel_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - alchemorsel-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: alchemorsel-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - alchemorsel-network

  # Apache Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: alchemorsel-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    ports:
      - "29092:29092"
    depends_on:
      - zookeeper
    networks:
      - alchemorsel-network

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: alchemorsel-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - alchemorsel-network

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: alchemorsel-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC
      - "14268:14268"  # HTTP
    networks:
      - alchemorsel-network

  # Prometheus (Metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: alchemorsel-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - alchemorsel-network

  # Grafana (Metrics Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: alchemorsel-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployments/docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - alchemorsel-network

  # MinIO (S3-compatible storage for development)
  minio:
    image: minio/minio:latest
    container_name: alchemorsel-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - alchemorsel-network

  # Alchemorsel API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: alchemorsel-api
    environment:
      ALCHEMORSEL_APP_ENVIRONMENT: development
      ALCHEMORSEL_DATABASE_HOST: postgres
      ALCHEMORSEL_DATABASE_PORT: 5432
      ALCHEMORSEL_DATABASE_DATABASE: alchemorsel_dev
      ALCHEMORSEL_DATABASE_USERNAME: postgres
      ALCHEMORSEL_DATABASE_PASSWORD: postgres
      ALCHEMORSEL_REDIS_HOST: redis
      ALCHEMORSEL_REDIS_PORT: 6379
      ALCHEMORSEL_KAFKA_BROKERS: kafka:9092
      ALCHEMORSEL_MONITORING_JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      ALCHEMORSEL_AWS_ENDPOINT: http://minio:9000
      ALCHEMORSEL_AWS_ACCESS_KEY_ID: minioadmin
      ALCHEMORSEL_AWS_SECRET_ACCESS_KEY: minioadmin
      ALCHEMORSEL_AWS_S3_BUCKET: alchemorsel-dev
    ports:
      - "3013:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    volumes:
      - ./uploads:/app/uploads
    networks:
      - alchemorsel-network

  # Alchemorsel Web Frontend (HTMX)
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: alchemorsel-web
    environment:
      ALCHEMORSEL_APP_ENVIRONMENT: development
      ALCHEMORSEL_DATABASE_HOST: postgres
      ALCHEMORSEL_DATABASE_PORT: 5432
      ALCHEMORSEL_DATABASE_DATABASE: alchemorsel_dev
      ALCHEMORSEL_DATABASE_USERNAME: postgres
      ALCHEMORSEL_DATABASE_PASSWORD: postgres
      ALCHEMORSEL_REDIS_HOST: redis
      ALCHEMORSEL_REDIS_PORT: 6379
      API_URL: http://api:8080
    ports:
      - "3014:8080"
    depends_on:
      api:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - alchemorsel-network

  # Background Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: alchemorsel-worker
    command: ["./worker"]
    environment:
      ALCHEMORSEL_APP_ENVIRONMENT: development
      ALCHEMORSEL_DATABASE_HOST: postgres
      ALCHEMORSEL_DATABASE_PORT: 5432
      ALCHEMORSEL_DATABASE_DATABASE: alchemorsel_dev
      ALCHEMORSEL_DATABASE_USERNAME: postgres
      ALCHEMORSEL_DATABASE_PASSWORD: postgres
      ALCHEMORSEL_REDIS_HOST: redis
      ALCHEMORSEL_REDIS_PORT: 6379
      ALCHEMORSEL_KAFKA_BROKERS: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - alchemorsel-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  minio_data:

networks:
  alchemorsel-network:
    driver: bridge